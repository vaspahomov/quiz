{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","questions","fetch","headers","then","x","json","y","console","log","setState","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","placeholder","style","display","this","map","mainIndex","padding","width","src","image","alt","question","answers","i","name","checked","htmlFor","undefined","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wJAAAA,EAAOC,QAAU,IAA0B,kC,qICiG5BC,G,wBA5FX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,UAAW,IAHL,E,iFAOO,IAAD,OAChBC,MAAM,kCACF,CACIC,QAAS,KAEZC,MAAK,SAAAC,GACFA,EAAEC,OAAOF,MAAK,SAAAG,GACVC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACT,UAAWM,Y,+BAMtC,OACI,yBAAKI,UAAU,OACX,yBAAKA,UAAU,iDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,UACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WACrDC,cAAY,0BACZC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAC5E,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BACzC,wBAAIR,UAAU,sBACV,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QAAsC,0BAAMD,UAAU,WAAhB,eAE1C,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,SAEJ,wBAAID,UAAU,qBACV,uBAAGA,UAAU,2BAA2BC,KAAK,IAAIO,GAAG,iBAAiBC,KAAK,SACvEN,cAAY,WACZO,gBAAc,OAAOJ,gBAAc,SAFtC,YAKA,yBAAKN,UAAU,gBAAgBW,kBAAgB,kBAC3C,uBAAGX,UAAU,gBAAgBC,KAAK,KAAlC,UACA,uBAAGD,UAAU,gBAAgBC,KAAK,KAAlC,kBACA,yBAAKD,UAAU,qBACf,uBAAGA,UAAU,gBAAgBC,KAAK,KAAlC,yBAGR,wBAAID,UAAU,YACV,uBAAGA,UAAU,oBAAoBC,KAAK,KAAtC,cAGR,0BAAMD,UAAU,4BACZ,2BAAOA,UAAU,uBAAuBE,KAAK,SAASU,YAAY,SAC3DL,aAAW,WAClB,4BAAQP,UAAU,uCAAuCE,KAAK,UAA9D,aAIZ,yBAAKF,UAAU,aACX,yBAAKa,MAAO,CAACC,QAAS,OAAQ,YAAa,SACtCC,KAAK1B,MAAMC,UAAYyB,KAAK1B,MAAMC,UAAU0B,KAAI,SAACtB,EAAGuB,GAAJ,OAC7C,yBAAKJ,MAAO,CAACK,QAAS,SAClB,yBAAKlB,UAAU,OAAOa,MAAO,CAACM,MAAO,UACjC,yBAAKnB,UAAU,eAAeoB,IAAG,mBAAc1B,EAAE2B,OAASC,IAAI,mBAC9D,yBAAKtB,UAAU,aACX,wBAAIA,UAAU,cAAcN,EAAE6B,UAC9B,6BACK7B,EAAE8B,QAAQR,KAAI,SAACpB,EAAG6B,GAAJ,OAAU,yBAAKzB,UAAU,+BACpC,2BAAOE,KAAK,QAAQM,GAAI,cAAgBiB,EACjCC,KAAM,cAAgBT,EACtBjB,UAAU,uBAAuB2B,SAAO,IAC/C,2BAAO3B,UAAU,uBAAuB4B,QAAS,cAAgBH,GAC5D7B,mBAOzBiC,IAGZ,4BAAQ7B,UAAU,kBAAkBE,KAAK,UAAzC,2E,GAvFE4B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.0b72586e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            questions: []\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:3000/questions',\n            {\n                headers: {}\n            })\n            .then(x => {\n                x.json().then(y => {\n                    console.log(y);\n                    this.setState({questions: y})\n                });\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                            data-target=\"#navbarSupportedContent\"\n                            aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item active\">\n                                <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link\" href=\"#\">Link</a>\n                            </li>\n                            <li className=\"nav-item dropdown\">\n                                <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\"\n                                   data-toggle=\"dropdown\"\n                                   aria-haspopup=\"true\" aria-expanded=\"false\">\n                                    Dropdown\n                                </a>\n                                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                                    <a className=\"dropdown-item\" href=\"#\">Action</a>\n                                    <a className=\"dropdown-item\" href=\"#\">Another action</a>\n                                    <div className=\"dropdown-divider\"></div>\n                                    <a className=\"dropdown-item\" href=\"#\">Something else here</a>\n                                </div>\n                            </li>\n                            <li className=\"nav-item\">\n                                <a className=\"nav-link disabled\" href=\"#\">Disabled</a>\n                            </li>\n                        </ul>\n                        <form className=\"form-inline my-2 my-lg-0\">\n                            <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\"\n                                   aria-label=\"Search\"/>\n                            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                        </form>\n                    </div>\n                </nav>\n                <div className=\"container\">\n                    <div style={{display: 'flex', 'flex-wrap': 'wrap'}}>\n                        {this.state.questions ? this.state.questions.map((x, mainIndex) =>\n                            <div style={{padding: '10px'}}>\n                                <div className=\"card\" style={{width: \"18rem\"}}>\n                                    <img className=\"card-img-top\" src={`./images/${x.image}`} alt=\"Card image cap\"/>\n                                    <div className=\"card-body\">\n                                        <h5 className=\"card-title\">{x.question}</h5>\n                                        <div>\n                                            {x.answers.map((y, i) => <div className=\"custom-control custom-radio\">\n                                                <input type=\"radio\" id={'customRadio' + i}\n                                                       name={\"customRadio\" + mainIndex}\n                                                       className=\"custom-control-input\" checked/>\n                                                <label className=\"custom-control-label\" htmlFor={\"customRadio\" + i}>\n                                                    {y}\n                                                </label>\n                                            </div>)}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ) : undefined}\n                    </div>\n                </div>\n                <button className=\"btn btn-primary\" type=\"submit\">Подтвердить</button>\n            </div>)\n\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}